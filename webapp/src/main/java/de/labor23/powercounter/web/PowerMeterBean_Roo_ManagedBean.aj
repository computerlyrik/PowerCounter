// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.labor23.powercounter.web;

import de.labor23.powercounter.dm.PowerMeter;
import de.labor23.powercounter.dm.hardware.Bank;
import de.labor23.powercounter.web.PowerMeterBean;
import de.labor23.powercounter.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect PowerMeterBean_Roo_ManagedBean {
    
    declare @type: PowerMeterBean: @ManagedBean(name = "powerMeterBean");
    
    declare @type: PowerMeterBean: @SessionScoped;
    
    private String PowerMeterBean.name = "PowerMeters";
    
    private PowerMeter PowerMeterBean.powerMeter;
    
    private List<PowerMeter> PowerMeterBean.allPowerMeters;
    
    private boolean PowerMeterBean.dataVisible = false;
    
    private List<String> PowerMeterBean.columns;
    
    private HtmlPanelGrid PowerMeterBean.createPanelGrid;
    
    private HtmlPanelGrid PowerMeterBean.editPanelGrid;
    
    private HtmlPanelGrid PowerMeterBean.viewPanelGrid;
    
    private boolean PowerMeterBean.createDialogVisible = false;
    
    @PostConstruct
    public void PowerMeterBean.init() {
        columns = new ArrayList<String>();
        columns.add("meterName");
        columns.add("address");
        columns.add("ticksPerKWH");
    }
    
    public String PowerMeterBean.getName() {
        return name;
    }
    
    public List<String> PowerMeterBean.getColumns() {
        return columns;
    }
    
    public List<PowerMeter> PowerMeterBean.getAllPowerMeters() {
        return allPowerMeters;
    }
    
    public void PowerMeterBean.setAllPowerMeters(List<PowerMeter> allPowerMeters) {
        this.allPowerMeters = allPowerMeters;
    }
    
    public String PowerMeterBean.findAllPowerMeters() {
        allPowerMeters = PowerMeter.findAllPowerMeters();
        dataVisible = !allPowerMeters.isEmpty();
        return null;
    }
    
    public boolean PowerMeterBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PowerMeterBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PowerMeterBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PowerMeterBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PowerMeterBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PowerMeterBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PowerMeterBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PowerMeterBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PowerMeterBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel meterNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        meterNameCreateOutput.setFor("meterNameCreateInput");
        meterNameCreateOutput.setId("meterNameCreateOutput");
        meterNameCreateOutput.setValue("Meter Name:");
        htmlPanelGrid.getChildren().add(meterNameCreateOutput);
        
        InputText meterNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        meterNameCreateInput.setId("meterNameCreateInput");
        meterNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.meterName}", String.class));
        meterNameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(meterNameCreateInput);
        
        Message meterNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        meterNameCreateInputMessage.setId("meterNameCreateInputMessage");
        meterNameCreateInputMessage.setFor("meterNameCreateInput");
        meterNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(meterNameCreateInputMessage);
        
        OutputLabel addressCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressCreateOutput.setFor("addressCreateInput");
        addressCreateOutput.setId("addressCreateOutput");
        addressCreateOutput.setValue("Address:");
        htmlPanelGrid.getChildren().add(addressCreateOutput);
        
        InputText addressCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        addressCreateInput.setId("addressCreateInput");
        addressCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.address}", Byte.class));
        addressCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addressCreateInput);
        
        Message addressCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressCreateInputMessage.setId("addressCreateInputMessage");
        addressCreateInputMessage.setFor("addressCreateInput");
        addressCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressCreateInputMessage);
        
        OutputLabel bankCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bankCreateOutput.setFor("bankCreateInput");
        bankCreateOutput.setId("bankCreateOutput");
        bankCreateOutput.setValue("Bank:");
        htmlPanelGrid.getChildren().add(bankCreateOutput);
        
        AutoComplete bankCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bankCreateInput.setId("bankCreateInput");
        bankCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.bank}", Bank.class));
        bankCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{powerMeterBean.completeBank}", List.class, new Class[] { String.class }));
        bankCreateInput.setDropdown(true);
        bankCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(bankCreateInput);
        
        Message bankCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bankCreateInputMessage.setId("bankCreateInputMessage");
        bankCreateInputMessage.setFor("bankCreateInput");
        bankCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bankCreateInputMessage);
        
        OutputLabel ticksPerKWHCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        ticksPerKWHCreateOutput.setFor("ticksPerKWHCreateInput");
        ticksPerKWHCreateOutput.setId("ticksPerKWHCreateOutput");
        ticksPerKWHCreateOutput.setValue("Ticks Per K W H:");
        htmlPanelGrid.getChildren().add(ticksPerKWHCreateOutput);
        
        Spinner ticksPerKWHCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        ticksPerKWHCreateInput.setId("ticksPerKWHCreateInput");
        ticksPerKWHCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.ticksPerKWH}", Integer.class));
        ticksPerKWHCreateInput.setRequired(true);
        
        htmlPanelGrid.getChildren().add(ticksPerKWHCreateInput);
        
        Message ticksPerKWHCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ticksPerKWHCreateInputMessage.setId("ticksPerKWHCreateInputMessage");
        ticksPerKWHCreateInputMessage.setFor("ticksPerKWHCreateInput");
        ticksPerKWHCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ticksPerKWHCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PowerMeterBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel meterNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        meterNameEditOutput.setFor("meterNameEditInput");
        meterNameEditOutput.setId("meterNameEditOutput");
        meterNameEditOutput.setValue("Meter Name:");
        htmlPanelGrid.getChildren().add(meterNameEditOutput);
        
        InputText meterNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        meterNameEditInput.setId("meterNameEditInput");
        meterNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.meterName}", String.class));
        meterNameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(meterNameEditInput);
        
        Message meterNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        meterNameEditInputMessage.setId("meterNameEditInputMessage");
        meterNameEditInputMessage.setFor("meterNameEditInput");
        meterNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(meterNameEditInputMessage);
        
        OutputLabel addressEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressEditOutput.setFor("addressEditInput");
        addressEditOutput.setId("addressEditOutput");
        addressEditOutput.setValue("Address:");
        htmlPanelGrid.getChildren().add(addressEditOutput);
        
        InputText addressEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        addressEditInput.setId("addressEditInput");
        addressEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.address}", Byte.class));
        addressEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addressEditInput);
        
        Message addressEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressEditInputMessage.setId("addressEditInputMessage");
        addressEditInputMessage.setFor("addressEditInput");
        addressEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressEditInputMessage);
        
        OutputLabel bankEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bankEditOutput.setFor("bankEditInput");
        bankEditOutput.setId("bankEditOutput");
        bankEditOutput.setValue("Bank:");
        htmlPanelGrid.getChildren().add(bankEditOutput);
        
        AutoComplete bankEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bankEditInput.setId("bankEditInput");
        bankEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.bank}", Bank.class));
        bankEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{powerMeterBean.completeBank}", List.class, new Class[] { String.class }));
        bankEditInput.setDropdown(true);
        bankEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(bankEditInput);
        
        Message bankEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bankEditInputMessage.setId("bankEditInputMessage");
        bankEditInputMessage.setFor("bankEditInput");
        bankEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bankEditInputMessage);
        
        OutputLabel ticksPerKWHEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        ticksPerKWHEditOutput.setFor("ticksPerKWHEditInput");
        ticksPerKWHEditOutput.setId("ticksPerKWHEditOutput");
        ticksPerKWHEditOutput.setValue("Ticks Per K W H:");
        htmlPanelGrid.getChildren().add(ticksPerKWHEditOutput);
        
        Spinner ticksPerKWHEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        ticksPerKWHEditInput.setId("ticksPerKWHEditInput");
        ticksPerKWHEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.ticksPerKWH}", Integer.class));
        ticksPerKWHEditInput.setRequired(true);
        
        htmlPanelGrid.getChildren().add(ticksPerKWHEditInput);
        
        Message ticksPerKWHEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ticksPerKWHEditInputMessage.setId("ticksPerKWHEditInputMessage");
        ticksPerKWHEditInputMessage.setFor("ticksPerKWHEditInput");
        ticksPerKWHEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ticksPerKWHEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PowerMeterBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText meterNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        meterNameLabel.setId("meterNameLabel");
        meterNameLabel.setValue("Meter Name:");
        htmlPanelGrid.getChildren().add(meterNameLabel);
        
        HtmlOutputText meterNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        meterNameValue.setId("meterNameValue");
        meterNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.meterName}", String.class));
        htmlPanelGrid.getChildren().add(meterNameValue);
        
        HtmlOutputText addressLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressLabel.setId("addressLabel");
        addressLabel.setValue("Address:");
        htmlPanelGrid.getChildren().add(addressLabel);
        
        HtmlOutputText addressValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.address}", String.class));
        htmlPanelGrid.getChildren().add(addressValue);
        
        HtmlOutputText bankLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bankLabel.setId("bankLabel");
        bankLabel.setValue("Bank:");
        htmlPanelGrid.getChildren().add(bankLabel);
        
        HtmlOutputText bankValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bankValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.bank}", String.class));
        htmlPanelGrid.getChildren().add(bankValue);
        
        HtmlOutputText ticksPerKWHLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ticksPerKWHLabel.setId("ticksPerKWHLabel");
        ticksPerKWHLabel.setValue("Ticks Per K W H:");
        htmlPanelGrid.getChildren().add(ticksPerKWHLabel);
        
        HtmlOutputText ticksPerKWHValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ticksPerKWHValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.powerMeter.ticksPerKWH}", String.class));
        htmlPanelGrid.getChildren().add(ticksPerKWHValue);
        
        return htmlPanelGrid;
    }
    
    public PowerMeter PowerMeterBean.getPowerMeter() {
        if (powerMeter == null) {
            powerMeter = new PowerMeter();
        }
        return powerMeter;
    }
    
    public void PowerMeterBean.setPowerMeter(PowerMeter powerMeter) {
        this.powerMeter = powerMeter;
    }
    
    public List<Bank> PowerMeterBean.completeBank(String query) {
        List<Bank> suggestions = new ArrayList<Bank>();
        for (Bank bank : Bank.values()) {
            if (bank.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(bank);
            }
        }
        return suggestions;
    }
    
    public String PowerMeterBean.onEdit() {
        return null;
    }
    
    public boolean PowerMeterBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PowerMeterBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PowerMeterBean.displayList() {
        createDialogVisible = false;
        findAllPowerMeters();
        return "powerMeter";
    }
    
    public String PowerMeterBean.displayCreateDialog() {
        powerMeter = new PowerMeter();
        createDialogVisible = true;
        return "powerMeter";
    }
    
    public String PowerMeterBean.persist() {
        String message = "";
        if (powerMeter.getId() != null) {
            powerMeter.merge();
            message = "message_successfully_updated";
        } else {
            powerMeter.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "PowerMeter");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPowerMeters();
    }
    
    public String PowerMeterBean.delete() {
        powerMeter.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "PowerMeter");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPowerMeters();
    }
    
    public void PowerMeterBean.reset() {
        powerMeter = null;
        createDialogVisible = false;
    }
    
    public void PowerMeterBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
