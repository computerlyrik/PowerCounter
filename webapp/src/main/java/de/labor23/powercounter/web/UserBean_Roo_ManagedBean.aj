// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.labor23.powercounter.web;

import de.labor23.powercounter.dm.PowerMeter;
import de.labor23.powercounter.dm.User;
import de.labor23.powercounter.web.UserBean;
import de.labor23.powercounter.web.converter.PowerMeterConverter;
import de.labor23.powercounter.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect UserBean_Roo_ManagedBean {
    
    declare @type: UserBean: @ManagedBean(name = "userBean");
    
    declare @type: UserBean: @SessionScoped;
    
    private String UserBean.name = "Users";
    
    private User UserBean.user;
    
    private List<User> UserBean.allUsers;
    
    private boolean UserBean.dataVisible = false;
    
    private List<String> UserBean.columns;
    
    private HtmlPanelGrid UserBean.createPanelGrid;
    
    private HtmlPanelGrid UserBean.editPanelGrid;
    
    private HtmlPanelGrid UserBean.viewPanelGrid;
    
    private boolean UserBean.createDialogVisible = false;
    
    private List<PowerMeter> UserBean.selectedPowerMeters;
    
    @PostConstruct
    public void UserBean.init() {
        columns = new ArrayList<String>();
    }
    
    public String UserBean.getName() {
        return name;
    }
    
    public List<String> UserBean.getColumns() {
        return columns;
    }
    
    public List<User> UserBean.getAllUsers() {
        return allUsers;
    }
    
    public void UserBean.setAllUsers(List<User> allUsers) {
        this.allUsers = allUsers;
    }
    
    public String UserBean.findAllUsers() {
        allUsers = User.findAllUsers();
        dataVisible = !allUsers.isEmpty();
        return null;
    }
    
    public boolean UserBean.isDataVisible() {
        return dataVisible;
    }
    
    public void UserBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid UserBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void UserBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void UserBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void UserBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel powerMetersCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        powerMetersCreateOutput.setFor("powerMetersCreateInput");
        powerMetersCreateOutput.setId("powerMetersCreateOutput");
        powerMetersCreateOutput.setValue("Power Meters:");
        htmlPanelGrid.getChildren().add(powerMetersCreateOutput);
        
        SelectManyMenu powerMetersCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        powerMetersCreateInput.setId("powerMetersCreateInput");
        powerMetersCreateInput.setConverter(new PowerMeterConverter());
        powerMetersCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.selectedPowerMeters}", List.class));
        UISelectItems powerMetersCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        powerMetersCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.allPowerMeters}", List.class));
        powerMetersCreateInput.setRequired(false);
        powerMetersCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "powerMeter", String.class));
        powerMetersCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{powerMeter}", String.class));
        powerMetersCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{powerMeter}", PowerMeter.class));
        powerMetersCreateInput.getChildren().add(powerMetersCreateInputItems);
        htmlPanelGrid.getChildren().add(powerMetersCreateInput);
        
        Message powerMetersCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        powerMetersCreateInputMessage.setId("powerMetersCreateInputMessage");
        powerMetersCreateInputMessage.setFor("powerMetersCreateInput");
        powerMetersCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(powerMetersCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel powerMetersEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        powerMetersEditOutput.setFor("powerMetersEditInput");
        powerMetersEditOutput.setId("powerMetersEditOutput");
        powerMetersEditOutput.setValue("Power Meters:");
        htmlPanelGrid.getChildren().add(powerMetersEditOutput);
        
        SelectManyMenu powerMetersEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        powerMetersEditInput.setId("powerMetersEditInput");
        powerMetersEditInput.setConverter(new PowerMeterConverter());
        powerMetersEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.selectedPowerMeters}", List.class));
        UISelectItems powerMetersEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        powerMetersEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{powerMeterBean.allPowerMeters}", List.class));
        powerMetersEditInput.setRequired(false);
        powerMetersEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "powerMeter", String.class));
        powerMetersEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{powerMeter}", String.class));
        powerMetersEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{powerMeter}", PowerMeter.class));
        powerMetersEditInput.getChildren().add(powerMetersEditInputItems);
        htmlPanelGrid.getChildren().add(powerMetersEditInput);
        
        Message powerMetersEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        powerMetersEditInputMessage.setId("powerMetersEditInputMessage");
        powerMetersEditInputMessage.setFor("powerMetersEditInput");
        powerMetersEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(powerMetersEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UserBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText powerMetersLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        powerMetersLabel.setId("powerMetersLabel");
        powerMetersLabel.setValue("Power Meters:");
        htmlPanelGrid.getChildren().add(powerMetersLabel);
        
        SelectManyMenu powerMetersValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        powerMetersValue.setId("powerMetersValue");
        powerMetersValue.setConverter(new PowerMeterConverter());
        powerMetersValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.selectedPowerMeters}", List.class));
        UISelectItems powerMetersValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        powerMetersValue.setReadonly(true);
        powerMetersValue.setDisabled(true);
        powerMetersValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userBean.user.powerMeters}", List.class));
        powerMetersValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "powerMeter", String.class));
        powerMetersValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{powerMeter}", String.class));
        powerMetersValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{powerMeter}", PowerMeter.class));
        powerMetersValue.getChildren().add(powerMetersValueItems);
        htmlPanelGrid.getChildren().add(powerMetersValue);
        
        return htmlPanelGrid;
    }
    
    public User UserBean.getUser() {
        if (user == null) {
            user = new User();
        }
        return user;
    }
    
    public void UserBean.setUser(User user) {
        this.user = user;
    }
    
    public List<PowerMeter> UserBean.getSelectedPowerMeters() {
        return selectedPowerMeters;
    }
    
    public void UserBean.setSelectedPowerMeters(List<PowerMeter> selectedPowerMeters) {
        if (selectedPowerMeters != null) {
            user.setPowerMeters(new ArrayList<PowerMeter>(selectedPowerMeters));
        }
        this.selectedPowerMeters = selectedPowerMeters;
    }
    
    public String UserBean.onEdit() {
        if (user != null && user.getPowerMeters() != null) {
            selectedPowerMeters = new ArrayList<PowerMeter>(user.getPowerMeters());
        }
        return null;
    }
    
    public boolean UserBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void UserBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String UserBean.displayList() {
        createDialogVisible = false;
        findAllUsers();
        return "user";
    }
    
    public String UserBean.displayCreateDialog() {
        user = new User();
        createDialogVisible = true;
        return "user";
    }
    
    public String UserBean.persist() {
        String message = "";
        if (user.getId() != null) {
            user.merge();
            message = "message_successfully_updated";
        } else {
            user.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "User");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUsers();
    }
    
    public String UserBean.delete() {
        user.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "User");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUsers();
    }
    
    public void UserBean.reset() {
        user = null;
        selectedPowerMeters = null;
        createDialogVisible = false;
    }
    
    public void UserBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
